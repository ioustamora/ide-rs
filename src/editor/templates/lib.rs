//! Library Template
//! Generated by RAD IDE

//! A Rust library created with RAD IDE

/// A sample function that returns a greeting
pub fn greet(name: &str) -> String {
    format!("Hello, {}!", name)
}

/// A sample struct demonstrating basic functionality
#[derive(Debug, Clone)]
pub struct Config {
    pub name: String,
    pub version: String,
    pub debug: bool,
}

impl Default for Config {
    fn default() -> Self {
        Self {
            name: "MyLibrary".to_string(),
            version: "0.1.0".to_string(),
            debug: false,
        }
    }
}

impl Config {
    /// Create a new configuration
    pub fn new(name: String, version: String) -> Self {
        Self {
            name,
            version,
            debug: false,
        }
    }
    
    /// Enable debug mode
    pub fn with_debug(mut self) -> Self {
        self.debug = true;
        self
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_greet() {
        let result = greet("World");
        assert_eq!(result, "Hello, World!");
    }

    #[test]
    fn test_config_default() {
        let config = Config::default();
        assert_eq!(config.name, "MyLibrary");
        assert_eq!(config.version, "0.1.0");
        assert!(!config.debug);
    }

    #[test]
    fn test_config_with_debug() {
        let config = Config::new("Test".to_string(), "1.0.0".to_string())
            .with_debug();
        assert!(config.debug);
    }
}